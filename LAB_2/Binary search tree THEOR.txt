Теоретическая часть: Дерево бинарного поиска
Дерево бинарного поиска (BST, Binary Search Tree) - это структура данных, в которой каждый узел имеет не более двух потомков, и они организованы следующим образом:

Левый потомок содержит значение меньшее, чем значение родительского узла.
Правый потомок содержит значение большее, чем значение родительского узла.
Преимущества дерева бинарного поиска:

Быстрый поиск, вставка и удаление элементов.
Эффективное использование памяти.
Основные операции:

Поиск: Начинаем с корня и сравниваем искомое значение с текущим узлом. Если оно меньше - переходим к левому потомку, если больше - к правому. Повторяем процесс, пока не найдем элемент или не дойдем до конца.
Вставка: Начинаем с корня и сравниваем вставляемое значение с текущим узлом. Если оно меньше - идем к левому потомку, если больше - к правому. Повторяем, пока не найдем подходящее место.
Удаление: Сложная операция, которая зависит от числа потомков удаляемого узла:
Узел без потомков просто удаляется.
Узел с одним потомком заменяется своим потомком.
Узел с двумя потомками заменяется либо минимальным элементом правого поддерева, либо максимальным элементом левого поддерева.

Объяснение кода
Класс TreeNode: Определяет узел дерева с левым и правым потомками и значением узла.
Класс BinarySearchTree: Определяет методы для работы с деревом:
insert: Вставляет новый узел в дерево.
search: Ищет узел с заданным значением.
delete: Удаляет узел с заданным значением.
_min_value_node: Находит узел с минимальным значением в заданном поддереве.
inorder: Выполняет инфиксный обход дерева и печатает значения узлов.
Этот пример показывает основные операции с деревом бинарного поиска, включая вставку, поиск и удаление элементов.






