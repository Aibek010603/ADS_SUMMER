Теоретическая часть: Бинарный поиск
Бинарный поиск - это алгоритм поиска элемента в отсортированном массиве. Он работает по принципу деления массива на две половины и сравнения искомого элемента с центральным элементом. Если искомый элемент меньше центрального, поиск продолжается в левой половине, если больше - в правой. Процесс повторяется до тех пор, пока искомый элемент не будет найден или не будет определено, что его в массиве нет.

Основные шаги бинарного поиска:

Найти середину массива.
Сравнить центральный элемент с искомым значением.
Если искомое значение меньше центрального, повторить поиск в левой половине массива.
Если искомое значение больше центрального, повторить поиск в правой половине массива.
Если центральный элемент равен искомому, вернуть индекс этого элемента.
Если подмассив становится пустым, вернуть -1 (элемент не найден).
Бинарный поиск эффективен для больших отсортированных массивов, так как его временная сложность составляет O(log n), что значительно лучше линейного поиска с временной сложностью O(n).


Объяснение кода
def binary_search(arr, target): Определение функции, которая принимает массив arr и искомое значение target.
left, right = 0, len(arr) - 1: Инициализация левой и правой границ массива.
while left <= right: Цикл продолжается до тех пор, пока левая граница не пересечет правую.
mid = (left + right) // 2: Нахождение середины массива.
if arr[mid] == target: Проверка, равен ли центральный элемент искомому значению.
elif arr[mid] < target: Если центральный элемент меньше искомого, перемещаем левую границу вправо.
else: Если центральный элемент больше искомого, перемещаем правую границу влево.
return -1: Возвращаем -1, если элемент не найден.
Этот алгоритм позволяет быстро находить элемент в отсортированном массиве, что делает его мощным инструментом в задачах, требующих эффективного поиска.






