Двусвязный список — это тип связного списка, в котором каждый узел содержит часть данных и два указателя (или ссылки): один указывает на следующий узел, а другой указывает на предыдущий узел в последовательности. Эта структура позволяет выполнять обход списка как в прямом, так и в обратном направлении.

Ключевые характеристики двусвязного списка:

Структура узла: Каждый узел содержит три поля:
данные: Значение, хранимое в узле.
следующий: Ссылка на следующий узел в списке.
предыдущий: Ссылка на предыдущий узел в списке.
Голова и хвост: В списке есть два специальных указателя: head, указывающий на первый узел, и tail, указывающий на последний узел.
Двунаправленный обход: Вы можете перемещаться по списку от головы до хвоста (в прямом направлении) и от хвоста до головы (в обратном направлении).
Преимущества:

Двунаправленный обход: Проще перемещаться вперед и назад по списку.
Удобство удаления: Узлы могут быть удалены без необходимости обхода списка для поиска предыдущего узла.
Недостатки:

Больше памяти: Требуется дополнительная память для дополнительного указателя (предыдущий) в каждом узле.
Сложность: Реализация сложнее по сравнению с односвязным списком из-за необходимости обработки дополнительного указателя.


Class Node:
Конструктор __init__:
data: значение, хранимое в узле.
next: ссылка на следующий узел в списке, изначально None.
prev: ссылка на предыдущий узел в списке, изначально None.

Class DoublyLinkedList:
Конструктор __init__:
head: указатель на первый узел списка, изначально None.
tail: указатель на последний узел списка, изначально None.

Function append:
Создает новый узел new_node с заданными данными.
Если список пуст (head равен None), делает новый узел и head, и tail.
Если список не пуст, добавляет новый узел в конец списка:
Устанавливает next для текущего хвоста на новый узел.
Устанавливает prev для нового узла на текущий хвост.
Обновляет tail, чтобы он указывал на новый узел.

Function prepend:
Создает новый узел new_node с заданными данными.
Если список пуст (head равен None), делает новый узел и head, и tail.
Если список не пуст, добавляет новый узел в начало списка:
Устанавливает next для нового узла на текущий head.
Устанавливает prev для текущего head на новый узел.
Обновляет head, чтобы он указывал на новый узел.

Function delete: 
Удаляет указанный узел node из списка.
Если список пуст, ничего не делает.
Если удаляемый узел — это head, обновляет head на следующий узел и устанавливает prev этого нового head в None.
Если удаляемый узел — это tail, обновляет tail на предыдущий узел и устанавливает next этого нового tail в None.
Если удаляемый узел находится посередине, обновляет ссылки предыдущего и следующего узлов так, чтобы они "перепрыгнули" через удаляемый узел.

Function Traverse_forward:
Обходит список в прямом направлении, начиная с head, и выводит данные каждого узла.
Перемещается от одного узла к следующему, пока не достигнет конца списка (current станет None).

Function Traverse_backward:
Обходит список в обратном направлении, начиная с tail, и выводит данные каждого узла.
Перемещается от одного узла к предыдущему, пока не достигнет начала списка (current станет None).

Example:
Создание экземпляра DoublyLinkedList.
Добавление узлов с данными 1, 2 и 3 в конец списка.
Добавление узла с данными 0 в начало списка.
Обход списка вперед и вывод значений узлов.
Обход списка назад и вывод значений узлов.
Удаление второго узла (узла со значением 1).
Обход списка вперед и вывод значений узлов после удаления.

